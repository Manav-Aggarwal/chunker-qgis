# -*- coding: utf-8 -*-
"""
/***************************************************************************
 KMZ_Generator
                                 A QGIS plugin
 This plugin takes in flight folders and generates kmz from them
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-08-09
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Skylark Drones
        email                : manav@stanford.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import (QApplication, QWidget, QFileDialog, QHBoxLayout,
                             QPushButton, QVBoxLayout, QLabel, QLineEdit, QStatusBar,
                             QFileDialog, QAction, QMessageBox, QProgressDialog)
from qgis.core import QgsMessageLog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .kmz_generator_dialog import KMZ_GeneratorDialog
from pykml.factory import KML_ElementMaker as KML
from lxml import etree
from zipfile import ZipFile
import os.path
import piexif
import fnmatch


class KMZ_Generator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'KMZ_Generator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = KMZ_GeneratorDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&kmzGenerator')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'KMZ_Generator')
        self.toolbar.setObjectName(u'KMZ_Generator')

        self.dlg.loadInputFolderButton.clicked.connect(self.load_input_folder)
        self.dlg.loadOutputFolderButton.clicked.connect(self.load_output_folder)
        self.dlg.generateButton.clicked.connect(self.generate)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('KMZ_Generator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/kmz_generator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Generate Flight KMZs'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&kmzGenerator'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass
        self.dlg.directoryList.clear()

    #Loads a directory
    def load_dir(self, lineEdit):
        dirPath = str(QFileDialog.getExistingDirectory(self.dlg, "Select Directory", ""))
        lineEdit.setText(dirPath)

    def load_input_folder(self):
        self.load_dir(self.dlg.inputFolderLine)
        self.dlg.directoryList.clear()
        dirPath = self.dlg.inputFolderLine.text()
        if not dirPath:
            return
        for file in os.listdir(dirPath):
            if os.path.isdir(os.path.join(dirPath, file)):
                self.dlg.directoryList.addItem(file)

    #Returns a list of selected directories from the list
    def getSelectedDirs(self, dirPath):
        dirs = []
        for x in range(0, self.dlg.directoryList.count()):
            if self.dlg.directoryList.item(x).isSelected():
                dirName = self.dlg.directoryList.item(x).text()
                dirs.append(os.path.join(dirPath, dirName))
        return dirs

    def generate(self):
        inputDirPath = self.dlg.inputFolderLine.text()
        dirs = self.getSelectedDirs(inputDirPath)
        outputDir = self.dlg.outputFolderLine.text()
        self.generateKMZs(dirs, outputDir)

    def generateKMZs(self, dirs, outputDir):
        for index, directory in enumerate(dirs):
            geotaggedDir = os.path.join(directory, "Geotagged-Images")
            dirName = os.path.basename(directory)
            QgsMessageLog.logMessage(dirName, "dirs", 0)
            imgToGPS = self.constructImgMap(geotaggedDir, dirName)
            if imgToGPS is None:
                return
            root = KML.kml(
                KML.Document(
                    KML.name(dirName),
                    KML.Style(
                        KML.IconStyle(
                            KML.Icon(
                                KML.href("http://maps.google.com/mapfiles/kml/pushpin/wht-pushpin.png")
                            ),
                            KML.colorMode("normal"),
                            KML.scale(0.6)
                        ),
                        id="scale"
                    )
                )
            )
            for imgName in imgToGPS:
                lon, lat, alt = imgToGPS[imgName]
                if lat and lon and alt:
                    placemark = KML.Placemark(
                        KML.visibility(0),
                        KML.description("{}, {}m".format(imgName, alt)),
                        KML.styleUrl("#scale"),
                        KML.Point(
                            KML.coordinates("{}, {}, {}".format(lon, lat, alt))
                        ),
                        KML.ExtendedData(
                            KML.Data(KML.value(imgName), name='imgName'),
                            KML.Data(KML.value(geotaggedDir),name='imgDir'),
                            KML.Data(KML.value(dirName),name='folderName'),
                            KML.Data(KML.value(lat),name='Latitude'),
                            KML.Data(KML.value(lon),name='Longitude'),
                            KML.Data(KML.value(alt),name='Altitude')
                        )
                    )
                    root.Document.append(placemark)
                else:
                    reply = QMessageBox.question(self.iface.mainWindow(), 'Continue?', 
                     'Warning: {} in {} cannot be found. Still continue?'.format(imgName, dirName), QMessageBox.Yes, QMessageBox.No)
                    if(reply == QMessageBox.No):
                        return
            outputPath = os.path.join(outputDir, dirName + ".kmz")
            kml_str = '<?xml version="1.0" encoding="UTF-8"?>\n'
            kml_str += etree.tostring(root, pretty_print=True).decode('UTF-8')
            with ZipFile(outputPath, 'w') as zip:
                zip.writestr('doc.kml', kml_str)

    def constructImgMap(self, imgDir, dirName):
        """Construct a dictionary that maps images in the image directory to their
        corresponding GPS coordinates by extracting EXIF data from the geotagged
        images."""
        progress = QProgressDialog("Generating KMZ for {}...".format(dirName), "Cancel", 0, 100)
        progress.show()
        QApplication.processEvents()
        imgPattern = "*.JPG"
        imgToGPS = {}
        listOfImages = os.listdir(imgDir)
        for index, image in enumerate(listOfImages):
            lon, lat, alt = None, None, None
            if fnmatch.fnmatch(image, imgPattern):
                imgPath = '/'.join([imgDir, image])
                QgsMessageLog.logMessage(imgPath, "images", 0)
                lon, lat, alt = self.getCoordinates(imgPath)
                imgToGPS[image] = (lon, lat, alt)
                progress.setValue(float(index)/len(listOfImages))
                QApplication.processEvents()
                if(progress.wasCanceled()):
                    return None
        return imgToGPS

    def convert_to_degress(self, value):
        """Helper function to convert the GPS coordinates stored in the EXIF to
        degress in float format."""
        d0 = value[0][0]
        d1 = value[0][1]
        d = float(d0) / float(d1)

        m0 = value[1][0]
        m1 = value[1][1]
        m = float(m0) / float(m1)

        s0 = value[2][0]
        s1 = value[2][1]
        s = float(s0) / float(s1)

        return d + (m / 60.0) + (s / 3600.0)

    def getCoordinates(self, imgPath):
        """Get the latitude, longitude, and altitude, if available, from the image's
        metadata"""
        exif_data = piexif.load(imgPath)
        lon = None
        lat = None
        alt = None
        if "GPS" in exif_data:
            gps_data = exif_data["GPS"]
            gps_latitude = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLatitude)
            gps_latitude_ref = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLatitudeRef)
            gps_longitude = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLongitude)
            gps_longitude_ref = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLongitudeRef)
            gps_altitude = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSAltitude)
            alt = None
            if gps_altitude:
                alt = float(gps_altitude[0])/float(gps_altitude[1])
            if gps_latitude and gps_latitude_ref \
                and gps_longitude and gps_longitude_ref \
                and gps_altitude:
                gps_latitude_ref = gps_latitude_ref.decode("utf-8")
                gps_longitude_ref = gps_longitude_ref.decode("utf-8")
                lat = self.convert_to_degress(gps_latitude)
                if gps_latitude_ref != 'N':
                    lat = 0 - lat
                lon = self.convert_to_degress(gps_longitude)
                if gps_longitude_ref != 'E':
                    lon = 0 - lon

        return lon, lat, alt

    def get_if_exist(self, data, key):
        """Get the given key in the dictionary, if it exists."""
        if key in data:
            return data[key]
        return None

    def load_output_folder(self):
        self.load_dir(self.dlg.outputFolderLine)
