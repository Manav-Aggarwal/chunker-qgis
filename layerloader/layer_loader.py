# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LayerLoader
                                 A QGIS plugin
 Reads a KML/KMZ file to create a new layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-16
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Skylark Drones
        email                : manav@stanford.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog
from qgis.core import (QgsMessageLog, QgsVectorDataProvider, QgsField, 
                        QgsProject, QgsVectorLayer, QgsFeature, QgsGeometry, QgsPointXY)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .layer_loader_dialog import LayerLoaderDialog
from pykml import parser
from pykml.factory import KML_ElementMaker as KML
from lxml import etree
from zipfile import ZipFile
import os
import piexif
import fnmatch


class LayerLoader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LayerLoader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = LayerLoaderDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Load new layer')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'LayerLoader')
        self.toolbar.setObjectName(u'LayerLoader')

        #Connect buttons to functions
        self.dlg.loadFileButton.clicked.connect(self.load_file)
        self.dlg.loadDirButton.clicked.connect(self.load_dir_foldername)
        self.dlg.loadDirectoryButton.clicked.connect(self.load_dir_datasetDir)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LayerLoader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/layer_loader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Load new layer'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Load new layer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #Run method that performs all the real work
    def run(self):
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            tabIndex = self.dlg.tabWidget.currentIndex()
            if(tabIndex == 0):
                filePath = self.dlg.fileLine.text() if tabIndex == 0 else self.dlg.directoryLine.text()
                if not filePath:
                    return
                attributes = self.getKMLAttributes(filePath)
                #Returns None only when getKMLAttributes fails
                if attributes is None:
                    return
                layerName = self.dlg.nameLine.text() + "_" + os.path.basename(filePath)
                layer = self.getTempLayerFromFile(filePath, layerName, attributes)
                if not layer:
                    return
            else:
                folderPath = self.dlg.directoryLine.text()
                if not folderPath:
                    return
                layerName = self.dlg.nameLine.text()
                layer = self.createLayerFromFolder(layerName, folderPath)
            QgsProject.instance().addMapLayer(layer)

    #Constructs a temporary layer in memory, adds attributes to it, and returns it
    def createLayerFromFolder(self, layerName, folderPath):
        imgToGPS = self.constructImgMap(folderPath)
        layer = QgsVectorLayer('Point25D?crs=epsg:4326', layerName, "memory")
        layer.startEditing()
        layer.dataProvider().addAttributes([
            QgsField("folderName", QVariant.String), QgsField("imgName", QVariant.String), QgsField("imgDir", QVariant.String), 
            QgsField("Longitude", QVariant.Double), QgsField("Latitude", QVariant.Double), QgsField("Altitude", QVariant.Double)
            ])
        layer.updateFields()
        feat = QgsFeature()
        feat.setFields(layer.fields())
        features = []
        for imgName in imgToGPS:
            lon, lat, alt = imgToGPS[imgName]
            try:
                lon, lat, alt = float(lon), float(lat), float(alt)
            except TypeError:
                pass
            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon, lat)))
            feat["folderName"] = self.dlg.nameLine.text()
            feat["imgName"] = imgName
            feat["imgDir"] = folderPath
            feat["Longitude"] = lon
            feat["Latitude"] = lat
            feat["Altitude"] = alt
            features.append(QgsFeature(feat))
        layer.addFeatures(features)
        layer.updateExtents()
        layer.commitChanges()
        return layer

    #Constructs a temporary layer in memory from the input layer path, adds relevant attributes, and returns it
    def getTempLayerFromFile(self, filePath, outputLayerName, attributes):
        layer = QgsVectorLayer(filePath, "", "ogr")
        if not layer:
            QgsMessageLog.logMessage("Layer failed to load!", 'layer_loader', 0)
            return None
        temp = QgsVectorLayer('Point25D?crs=epsg:4326', outputLayerName, "memory")
        temp.startEditing()
        temp.dataProvider().addAttributes([
            QgsField("folderName", QVariant.String), QgsField("imgName", QVariant.String), QgsField("imgDir", QVariant.String), 
            QgsField("Longitude", QVariant.Double), QgsField("Latitude", QVariant.Double), QgsField("Altitude", QVariant.Double)
            ])
        temp.updateFields()
        feat = QgsFeature()
        feat.setFields(temp.fields())
        features = []
        for imgName in attributes:
            for key in attributes[imgName]:
                feat[key] = attributes[imgName][key]
            lon, lat = feat["Longitude"], feat["Latitude"]
            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon, lat)))
            features.append(QgsFeature(feat))
        temp.addFeatures(features)
        temp.updateExtents()
        temp.commitChanges()
        return temp

    """
        Returns a dictionary with attributes of a KML
        attributes[image name] = attribute
    """
    def getKMLAttributes(self, inputPath):
        kml_str = self.getKmlStrFromPath(inputPath)
        #Returns None only when getKmlStrFromPath fails
        if kml_str is None:
            return None
        root = parser.fromstring(kml_str)
        attributes = {}
        for placemark in root.Document.Placemark:
            attribute = {}
            lon, lat, alt = str(placemark.Point.coordinates).split(',')
            imgName = str(placemark.description)

            attribute["folderName"] = self.dlg.nameLine.text()
            attribute["imgName"] = imgName
            attribute["imgDir"] = self.dlg.dirLine.text()
            attribute["Longitude"] = float(lon)
            attribute["Latitude"] = float(lat)
            attribute["Altitude"] = float(alt)

            attributes[imgName] = attribute 

        return attributes

    def constructImgMap(self, imgDir):
        """Construct a dictionary that maps images in the image directory to their
        corresponding GPS coordinates by extracting EXIF data from the geotagged
        images."""
        imgPattern = "*.JPG"
        imgToGPS = {}
        listOfImages = os.listdir(imgDir)
        for image in listOfImages:
            lon, lat, alt = None, None, None
            if fnmatch.fnmatch(image, imgPattern):
                imgPath = '/'.join([imgDir, image])
                lon, lat, alt = self.getCoordinates(imgPath)
                imgToGPS[image] = (lon, lat, alt)
        return imgToGPS

    def get_if_exist(self, data, key):
        """Get the given key in the dictionary, if it exists."""
        if key in data:
            return data[key]
        return None

    def convert_to_degress(self, value):
        """Helper function to convert the GPS coordinates stored in the EXIF to
        degress in float format."""
        d0 = value[0][0]
        d1 = value[0][1]
        d = float(d0) / float(d1)

        m0 = value[1][0]
        m1 = value[1][1]
        m = float(m0) / float(m1)

        s0 = value[2][0]
        s1 = value[2][1]
        s = float(s0) / float(s1)

        return d + (m / 60.0) + (s / 3600.0)

    def getCoordinates(self, imgPath):
        """Get the latitude, longitude, and altitude, if available, from the image's
        metadata"""
        exif_data = piexif.load(imgPath)
        lon = None
        lat = None
        alt = None
        if "GPS" in exif_data:
            gps_data = exif_data["GPS"]
            gps_latitude = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLatitude)
            gps_latitude_ref = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLatitudeRef)
            gps_longitude = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLongitude)
            gps_longitude_ref = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSLongitudeRef)
            gps_altitude = self.get_if_exist(
                gps_data, piexif.GPSIFD.GPSAltitude)
            alt = float(gps_altitude[0])/float(gps_altitude[1])
            if gps_latitude and gps_latitude_ref \
                and gps_longitude and gps_longitude_ref \
                and gps_altitude:
                gps_latitude_ref = gps_latitude_ref.decode("utf-8")
                gps_longitude_ref = gps_longitude_ref.decode("utf-8")
                lat = self.convert_to_degress(gps_latitude)
                if gps_latitude_ref != 'N':
                    lat = 0 - lat
                lon = self.convert_to_degress(gps_longitude)
                if gps_longitude_ref != 'E':
                    lon = 0 - lon

        return lon, lat, alt

    #Returns the file extension from a path
    def getExtension(self, path):
        filename, file_extension = os.path.splitext(path)
        return file_extension

    #Returns True if the path is that of a zipped file
    def isZipped(self, path):
        return self.getExtension(path).lower() == '.kmz'

    #Returns KML/KMZ file in string format
    def getKmlStrFromPath(self, path):
        if(self.isZipped(path)):
            try:
                kmz_file = ZipFile(path, 'r')
                contents = kmz_file.read('doc.kml')
            except Exception as e:
                QgsMessageLog.logMessage(str(e), "Failed to read KML", 0)
                return None
        else:
            kml_file = open(path, 'rb')
            contents = kml_file.read()
            kml_file.close()
        return contents

    #Loads a KML/KMZ file
    def load_file(self):
        filePath = QFileDialog.getOpenFileName(self.dlg, 
            'Select photo kml/kmz file', 
            "",
            'KML/KMZ files (*.kmz *.kml)')
        if filePath is None:
            return
        filePath = filePath[0]
        self.dlg.fileLine.setText(filePath)
        inputDir = os.path.dirname(filePath)
        imgDir = os.path.join(inputDir, "Geotagged-Images")
        self.dlg.dirLine.setText(imgDir)
        self.dlg.nameLine.setText(os.path.basename(inputDir))

    #Loads a directory
    def load_dir(self, lineEdit):
        dirPath = str(QFileDialog.getExistingDirectory(self.dlg, "Select Directory", ""))
        lineEdit.setText(dirPath)

    #Loads folderName
    def load_dir_foldername(self):
        self.load_dir(self.dlg.dirLine)

    def load_dir_datasetDir(self):
        self.load_dir(self.dlg.directoryLine)
        folderPath = self.dlg.directoryLine.text()
        self.dlg.nameLine.setText(os.path.basename(folderPath))
