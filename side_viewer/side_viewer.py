# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Side_Viewer
                                 A QGIS plugin
 Enables visualizing the points in 3D space and toggling different flights
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-24
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Skylark Drones
        email                : manav@stanford.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from qgis.core import QgsMessageLog, QgsVectorDataProvider, QgsField, QgsProject, QgsRenderContext

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .side_viewer_dialog import Side_ViewerDialog
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import axes
import os.path

class Side_Viewer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Side_Viewer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = Side_ViewerDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Side Viewer')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Side_Viewer')
        self.toolbar.setObjectName(u'Side_Viewer')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Side_Viewer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/side_viewer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Side Viewer'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Side Viewer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        self.rootGroup = self.iface.layerTreeView().layerTreeModel().rootGroup()
        self.sideViewFigure = Figure()
        self.sideViewWidget = FigureCanvas(self.sideViewFigure)
        self.sideViewToolBar = NavigationToolbar(self.sideViewWidget, self.dlg)
        if(self.dlg.verticalLayout.count() == 0):
            self.dlg.verticalLayout.addWidget(self.sideViewToolBar)
            self.dlg.verticalLayout.addWidget(self.sideViewWidget)

        layers = (layer for layer in QgsProject.instance().mapLayers().values() if layer.geometryType() == 0)

        for layer in layers:
            layer.selectionChanged.connect(self.replot)
        QgsProject.instance().layerTreeRoot().visibilityChanged.connect(self.replot)
        pid = self.sideViewWidget.mpl_connect('pick_event', self.callback)

        self.graphData = self.getPlotData()
        self.xs, self.ys, self.zs, self.colors, self.names = self.graphData
        self.ax = self.sideViewFigure.add_subplot(111, projection='3d')
        self.ax.clear()
        self.scatter_points = self.ax.scatter(self.xs, self.ys, self.zs, picker=True, c=self.colors)
        self.ax.set_xlabel('Latitude', picker=True)
        self.ax.set_ylabel('Longitude', picker=True)
        self.ax.set_zlabel('Altitude', picker=True)
        self.ax.view_init(elev=-90., azim=0)
        #figZoom = self.zoom_factory(base_scale = 1.01)
        self.text = None
        # for i in range(len(xs)):
        #      text = ax.text(xs[i], ys[i], zs[i], "", color=colors[i])
        self.sideViewWidget.draw()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            layers = (layer for layer in QgsProject.instance().mapLayers().values() if layer.geometryType() == 0)
            for layer in layers:
                layer.selectionChanged.disconnect(self.replot)
            self.sideViewWidget.mpl_disconnect(pid)
            QgsProject.instance().layerTreeRoot().visibilityChanged.disconnect(self.replot)

        self.dlg.verticalLayout.removeWidget(self.sideViewWidget)

    def replot(self, layerTreeNode):
        self.graphData = self.getPlotData()
        self.xs, self.ys, self.zs, self.colors, self.names = self.graphData
        self.ax.clear()
        self.ax.scatter(self.xs, self.ys, self.zs, picker=True, c=self.colors)
        self.sideViewWidget.draw()

    def test(self):
        QgsMessageLog.logMessage("triggered", 'layer_select', 0)

    def getPlotData(self):
        xs, ys, zs, colors, names, textList = [], [], [], [], [], []
        layers = (layer for layer in QgsProject.instance().mapLayers().values() if layer.geometryType() == 0)
        for layer in layers:
            if(self.rootGroup.findLayer(layer).itemVisibilityChecked()):
                renderer = layer.renderer()
                rendererContext = QgsRenderContext()
                renderer.startRender(rendererContext, layer.fields())
                allFeatures = layer.getFeatures()
                selectedFeaturesIds = layer.selectedFeatureIds()
                for feature in allFeatures:
                    lon, lat, alt = feature['Longitude'], feature['Latitude'], feature['Altitude']
                    lon, lat, alt = float(lon), float(lat), float(alt)
                    xs.append(lat)
                    ys.append(lon)
                    zs.append(alt)
                    if (feature.id() in selectedFeaturesIds):
                        color = 'y'
                    else:
                        symbol = renderer.symbolForFeature(feature, rendererContext)
                        color = symbol.color().name()
                        QgsMessageLog.logMessage(color, "color", 0)
                        #color = 'b'
                    colors.append(color)
                    names.append(str(feature['imgName']) + ", " + str(alt))
        return (xs, ys, zs, colors, names)

    def callback(self, event):
        #QgsMessageLog.logMessage(self.ax.format_coord(event.mouseevent.xdata, event.mouseevent.ydata), 'mouse', 0)
        #QgsMessageLog.logMessage(str(event.ind), 'mouse', 0)
        i = event.ind[0]
        self.dlg.pointDesc.setText(self.names[i])
        #QgsMessageLog.logMessage(str(txt.get_text()), 'mouse', 0)