# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ConvertTo3D
                                 A QGIS plugin
 This plugin takes in a 2D kml file and outputs a 3D version of it.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-11
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Skylark Drones
        email                : manav@stanford.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog
from PyQt5.QtCore import Qt
from qgis.core import QgsMessageLog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .convertTo3D_dialog import ConvertTo3DDialog

from pykml import parser
from pykml.factory import KML_ElementMaker as KML
from lxml import etree
from zipfile import ZipFile
import os


class ConvertTo3D:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ConvertTo3D_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = ConvertTo3DDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Convert to 3D')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'ConvertTo3D')
        self.toolbar.setObjectName(u'ConvertTo3D')

        #Connect buttons to functions
        self.dlg.loadInputFileButton.clicked.connect(self.select_input_file)
        self.dlg.loadInputFolderButton.clicked.connect(self.select_input_folder)
        self.dlg.loadOutputButton.clicked.connect(self.select_output_dir)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ConvertTo3D', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/convertTo3D/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Convert to 3D'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Convert to 3D'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #Run method that performs all the real work
    def run(self):
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            tabIndex = self.dlg.tabWidget.currentIndex()
            if(tabIndex == 0):
                inputPath = self.dlg.inputFileLine.text()
                outputName = self.dlg.outputFileName.text()
                outputDir = self.dlg.outputLine.text()
                if(inputPath and outputName and outputDir):
                    self.convertKML(inputPath, outputName, outputDir)
            else:
                inputPath = self.dlg.inputFolderLine.text()
                outputName = self.dlg.outputFileName.text()
                outputDir = self.dlg.outputLine.text()
                if(inputPath and outputName and outputDir):
                    self.convertFolder(inputPath, outputName, outputDir)

    #Colors taken from http://www.zonums.com/gmaps/kml_color/
    def getColors(self):
        colors = ["FF1400FF", "FF1478FF", "FF14B4FF", "FF78FF00", "FFFF7800", "FFFF78F0", 
        "FFFFFFFF", "FFF0FF14", "FF7800F0", "FF646464", "FF5A783C", "FF781414", "FF143C78"]
        return colors

    #Modifies altitude mode of each placemark in the KML and sets it to absolute
    def convertKML(self, inputPath, outputName, outputDir):
        kml_str = self.getKmlStrFromPath(inputPath)
        if kml_str is None:
            return
        root = parser.fromstring(kml_str)
        for style in root.Document.Style:
            root.Document.remove(style)
        for placemark in root.Document.Placemark:
            placemark.Point.altitudeMode = 'absolute'
            placemark.remove(placemark.styleUrl)
        outputPath = os.path.join(outputDir, outputName + ".kmz")
        kml_str = '<?xml version="1.0" encoding="UTF-8"?>\n'
        kml_str += etree.tostring(root, pretty_print=True).decode('UTF-8')
        with ZipFile(outputPath, 'w') as zip:
            zip.writestr(outputName + '.kml', kml_str)

    def getKMZs(self, inputPath):
        kmzPaths = []
        listOfFiles = os.listdir(inputPath)
        for file in listOfFiles:
            if(self.isZipped(file)):
                kmzPath = os.path.join(inputPath, file)
                kmzPaths.append(kmzPath)
        return sorted(kmzPaths)

    def convertFolder(self, inputPath, outputName, outputDir):
        kmzPaths = self.getKMZs(inputPath)
        colors = self.getColors()
        root = KML.kml(
            KML.Document()
        )
        folders = []
        for index, kmzPath in enumerate(kmzPaths):
            folder = KML.Folder()

            folder.append(
                KML.name(
                    os.path.basename(kmzPath)
                )
            )
            color = colors[index % len(colors)]
            folder.append(self.getStyle(color))
            kml_str = self.getKmlStrFromPath(os.path.join(inputPath, kmzPath))
            if kml_str is None:
                return
            root = parser.fromstring(kml_str)
            for style in root.Document.Style:
                root.Document.remove(style)
            for placemark in root.Document.Placemark:
                placemark.Point.altitudeMode = 'absolute'
                lon, lat, alt = str(placemark.Point.coordinates).split(',')
                placemark.styleUrl = "#{}".format(color)
                folder.append(placemark)
            folders.append(folder)
        root.Document.remove(root.Document.name)
        root.Document.append(KML.name(outputName))
        for folder in folders:
            root.Document.append(folder)
        outputPath = os.path.join(outputDir, outputName + ".kmz")
        kml_str = '<?xml version="1.0" encoding="UTF-8"?>\n'
        kml_str += etree.tostring(root, pretty_print=True).decode('UTF-8')
        with ZipFile(outputPath, 'w') as zip:
            zip.writestr('doc.kml', kml_str)

    def getStyle(self, color):
        style = KML.Style(
            KML.IconStyle(
                KML.Icon(
                        KML.href("http://maps.google.com/mapfiles/kml/pushpin/wht-pushpin.png")
                    ),
                KML.colorMode("normal"),
                KML.color(color),
                KML.scale(0.8)
            ),
            id=color
        )
        return style

    #Returns the file extension from a path
    def getExtension(self, path):
        filename, file_extension = os.path.splitext(path)
        return file_extension

    #Returns True if the path is that of a zipped file
    def isZipped(self, path):
        return self.getExtension(path).lower() == '.kmz'

    #Returns KML/KMZ file in string format
    def getKmlStrFromPath(self, path):
        if(self.isZipped(path)):
            try:
                kmz_file = ZipFile(path, 'r')
                contents = kmz_file.read('doc.kml')
            except Exception as e:
                QgsMessageLog.logMessage(str(e), "Failed to read KML", 0)
                return None
        else:
            kml_file = open(path, 'rb')
            contents = kml_file.read()
            kml_file.close()
        return contents

    #Select an input KML/KMZ file
    def select_input_file(self):
        path = QFileDialog.getOpenFileName(self.dlg, 
            'Select photo kml/kmz file', 
            "",
            'KML/KMZ files (*.kmz *.kml)')
        if path is None:
            return
        path = path[0]
        self.dlg.inputFileLine.setText(path)

    #Select an output directory
    def select_output_dir(self):
        path = str(QFileDialog.getExistingDirectory(self.dlg, "Select Directory", ""))
        self.dlg.outputLine.setText(path)

    def select_input_folder(self):
        path = str(QFileDialog.getExistingDirectory(self.dlg, "Select Directory", ""))
        self.dlg.inputFolderLine.setText(path)

